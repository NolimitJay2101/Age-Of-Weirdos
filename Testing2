local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Age of Weirdos",
    LoadingTitle = "Age of Weirdos",
    LoadingSubtitle = "DAMN.Jay",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "Big Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

Rayfield:Notify({
    Title = "Welcome To Age Of Weirdos",
    Content = "Worst Game",
    Duration = 5,
    Image = nil,
    Actions = {
        Ignore = {
            Name = "Okay!",
            Callback = function()
                print("The user tapped Okay!")
            end
        },
    },
})

local FarmTab = Window:CreateTab("Farm") -- Title, Image

--AutoFarm Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local MainSection = FarmTab:CreateSection("AutoFarm")

local AutoOrbsToggle = FarmTab:CreateToggle({
    Name = "Autofarm Orbs",
    Flag = "AutoOrbsToggle", -- Add a flag for identification if needed
    Callback = function(state)
        if state then
            getgenv().OrbFarm = true;
            local function orbFarmLogic()
                local Playerhead = game.Players.LocalPlayer.Character.Head;
                for _, v in pairs(game:GetService("Workspace").ExperienceOrbs:GetDescendants()) do
                    if v.Name == "TouchInterest" and v.Parent then
                        firetouchinterest(Playerhead, v.Parent, 0);
                    end
                end
            end

            spawn(function()
                repeat
                    pcall(orbFarmLogic);
                    wait(15);
                until not getgenv().OrbFarm
            end);
        else
            spawn(function()
                getgenv().OrbFarm = false;
            end);
        end
    end
})

-- Civilian Farm Toggle
local CivilianX, CivilianY, CivilianZ; -- Variables to store player position
local CivilianToggle = FarmTab:CreateToggle({
    Name = "Civilian Farm",
    CurrentValue = false,
    Flag = "CivilianToggle",
    Callback = function(Value)
        getgenv().Civilian = Value
        if Value then
            spawn(function()
                while getgenv().Civilian do
                    wait(0.2)
                    for _, v in pairs(game.Workspace:GetChildren()) do
                        if v:IsA("Model") and v.Name == "Civilian" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                            game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            local playerCFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = playerCFrame
                        end
                    end
                end
            end)

            -- Save current position
            local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            CivilianX, CivilianY, CivilianZ = rootPart.Position.X, rootPart.Position.Y, rootPart.Position.Z
        else
            wait(0.2)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(CivilianX, CivilianY, CivilianZ)
        end
    end,
})

-- Police Farm Toggle
local PolicePosition -- Variable to store player position
local PoliceToggle = FarmTab:CreateToggle({
    Name = "Police Farm",
    CurrentValue = false,
    Flag = "PoliceFarmToggle",
    Callback = function(Value)
        getgenv().Police = Value
        if Value then
            spawn(function()
                while getgenv().Police do
                    wait(0.2)
                    for _, v in pairs(game.Workspace:GetChildren()) do
                        if v:IsA("Model") and v.Name == "Police" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                            game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            local playerCFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = playerCFrame
                        end
                    end
                end
            end)

            -- Save current position
            local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            PolicePosition = rootPart.Position
        else
            wait(0.2)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(PolicePosition)
        end
    end,
})

-- Thug Farm Toggle
local ThugPosition -- Variable to store player position
local ThugToggle = FarmTab:CreateToggle({
    Name = "Thug Farm",
    CurrentValue = false,
    Flag = "ThugFarmToggle",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

        if not humanoidRootPart then
            return
        end

        if Value then
            -- Toggle is turned ON
            getgenv().Thug = true

            spawn(function()
                while getgenv().Thug do
                    wait(0.2)
                    pcall(function()
                        for _, v in pairs(game.Workspace:GetChildren()) do
                            if v:IsA("Model") and v.Name == "Thug" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                                local playerCFrame = humanoidRootPart.CFrame
                                playerCFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                                humanoidRootPart.CFrame = playerCFrame
                            end
                        end
                    end)
                end
            end)

            -- Save current position
            ThugPosition = humanoidRootPart.Position
        else
            -- Toggle is turned OFF
            getgenv().Thug = false
            wait(0.2)
            humanoidRootPart.CFrame = CFrame.new(ThugPosition)
        end
    end,
})

-- Laser Civilian Farm Toggle
local LaserCivilianFarmToggle = FarmTab:CreateToggle({
    Name = "Laser Civilian Farm",
    CurrentValue = false,
    Flag = "LaserCivilianFarmToggle",
    Callback = function(state)
        if state then
            getgenv().LaserC = true;
            coroutine.resume(coroutine.create(function()
                local event = game:GetService("ReplicatedStorage").Events.ToggleLaserVision;
                local part = event:InvokeServer(true);
                getgenv().LaserC = true;
                while LaserC and part do
                    wait();
                    for i, v in pairs(game.Workspace:GetChildren()) do
                        if ((v.ClassName == "Model") and (v.Name == "Civilian") and v:FindFirstChild("Humanoid") and (v.Humanoid.Health > 0)) then
                            part.Position = v.HumanoidRootPart.Position;
                        end
                    end
                end
                event:InvokeServer(false);
            end));
        else
            spawn(function()
                getgenv().LaserC = false;
            end);
            breakvelocity();
        end
    end,
})

-- Laser Police Farm Toggle
local LaserPoliceFarmToggle = FarmTab:CreateToggle({
    Name = "Laser Police Farm",
    CurrentValue = false,
    Flag = "LaserPoliceFarmToggle",
    Callback = function(state)
        if state then
            getgenv().LaserV = true;
            coroutine.resume(coroutine.create(function()
                local event = game:GetService("ReplicatedStorage").Events.ToggleLaserVision;
                local part = event:InvokeServer(true);
                getgenv().LaserV = true;
                while LaserV and part do
                    for i, v in pairs(game.Workspace:GetChildren()) do
                        if ((v.ClassName == "Model") and (v.Name == "Police") and v:FindFirstChild("Humanoid") and (v.Humanoid.Health > 0)) then
                            part.Position = v.HumanoidRootPart.Position;
                        end
                    end
                    wait();
                end
                event:InvokeServer(false);
            end));
        else
            spawn(function()
                getgenv().LaserV = false;
            end);
            breakvelocity();
        end
    end,
})

-- Laser Thug Farm Toggle
local LaserThugFarmToggle = FarmTab:CreateToggle({
    Name = "Laser Thug Farm",
    CurrentValue = false,
    Flag = "LaserThugFarmToggle",
    Callback = function(state)
        if state then
            getgenv().LaserH = true;
            coroutine.resume(coroutine.create(function()
                local event = game:GetService("ReplicatedStorage").Events.ToggleLaserVision;
                local part = event:InvokeServer(true);
                getgenv().LaserH = true;
                while LaserH and part do
                    wait();
                    for i, v in pairs(game.Workspace:GetChildren()) do
                        if ((v.ClassName == "Model") and (v.Name == "Thug") and v:FindFirstChild("Humanoid") and (v.Humanoid.Health > 0)) then
                            part.Position = v.HumanoidRootPart.Position;
                        end
                    end
                end
                event:InvokeServer(false);
            end));
        else
            spawn(function()
                getgenv().LaserH = false;
            end);
            breakvelocity();
        end
    end,
})

--Player Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local PlayerMenuTab = Window:CreateTab("Player Menu") -- Title, Image
local PlayerMenuSection = PlayerMenuTab:CreateSection("Spawn")

--Spawn
local SpawnPointToggle = PlayerMenuTab:CreateToggle({
    Name = "Spawn Point",
    CurrentValue = false,
    Flag = "SpawnPointToggle",
    Callback = function(state)
        if state then
            getgenv().Deathcheck = true
            local player = game.Players.LocalPlayer
            local character = player.Character
            if not character or not character:IsDescendantOf(game.Workspace) then
                character = player.CharacterAdded:Wait()
            end
            local varX = character.UpperTorso.Position.X
            local varY = character.UpperTorso.Position.Y
            local varZ = character.UpperTorso.Position.Z
            spawn(function()
                while getgenv().Deathcheck do
                    wait(0.5) -- Adjust the wait time as needed
                    character = player.Character
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health == 0 then
                        wait(6.5)
                        character:SetPrimaryPartCFrame(CFrame.new(Vector3.new(varX, varY, varZ)))
                    end
                end
            end)
        else
            getgenv().Deathcheck = false
        end
    end,
})

--Punch
local PlayerMenuSection = PlayerMenuTab:CreateSection("Punch")

local Toggle = PlayerMenuTab:CreateToggle({
    Name = "Rapid Punch",
    CurrentValue = false,
    Flag = "RapidPunchToggle",
    Callback = function(state)
        if state then
            getgenv().rapid = true
            local UserInputService = game:GetService("UserInputService")
            local function onInputEnded(inputObject, gameProcessedEvent)
                if gameProcessedEvent then
                    return
                end
                if rapid then
                    if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
                        spawn(function()
                            for _ = 1, 10 do
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            end
                        end)
                    end
                end
            end
            UserInputService.InputEnded:Connect(onInputEnded)
        else
            spawn(function()
                getgenv().rapid = false
            end)
        end
    end,
}) 

local Toggle = PlayerMenuTab:CreateToggle({
    Name = "Rapid Heavy Punch",
    CurrentValue = false,
    Flag = "RapidHeavyPunchToggle",
    Callback = function(state)
        if state then
            getgenv().Hrapid = true
            local UserInputService = game:GetService("UserInputService")
            local function onInputEnded(inputObject, gameProcessedEvent)
                if gameProcessedEvent then
                    return
                end
                if Hrapid then
                    if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
                        spawn(function()
                            for _ = 1, 10 do
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0.4, 0.1, 1)
                            end
                        end)
                    end
                end
            end
            UserInputService.InputEnded:Connect(onInputEnded)
        else
            spawn(function()
                getgenv().Hrapid = false
            end)
        end
    end,
})

local Toggle = PlayerMenuTab:CreateToggle({
    Name = "Super Rapid Punch",
    CurrentValue = false,
    Flag = "SuperRapidPunchToggle",
    Callback = function(state)
        if state then
            getgenv().superrapid = true
            local UserInputService = game:GetService("UserInputService")
            local function onInputEnded(inputObject, gameProcessedEvent)
                if gameProcessedEvent then
                    return
                end
                if superrapid then
                    if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
                        for _ = 1, 10 do
                            spawn(function()
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            end)
                        end
                        for _ = 1, 10 do
                            spawn(function()
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            end)
                        end
                        for _ = 1, 10 do
                            spawn(function()
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            end)
                        end
                        for _ = 1, 10 do
                            spawn(function()
                                game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                            end)
                        end
                    end
                end
            end
            UserInputService.InputEnded:Connect(onInputEnded)
        else
            spawn(function()
                getgenv().superrapid = false
            end)
        end
    end,
})

--Telekinesis
local PlayerMenuSection = PlayerMenuTab:CreateSection("Telekinesis")

local TelekinesisSpaceFlingToggle = PlayerMenuTab:CreateToggle({
    Name = "Telekinesis Space Fling",
    CurrentValue = false,
    Flag = "TelekinesisSpaceFlingToggle",
    Callback = function(state)
        if state then
            getgenv().telesauras = true
            while telesauras do
                wait(0.2)
                spawn(function()
                    game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(999999, 999999, 999999), true)
                    game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(999999, 999999, 999999), false)
                end)
            end
        else
            spawn(function()
                getgenv().telesauras = false
            end)
        end
    end,
})

local Toggle = PlayerMenuTab:CreateToggle({
    Name = "Antitelekinesis",
    CurrentValue = false,
    Flag = "AntitelekinesisToggle",
    Callback = function(Value)
        getgenv().localtele = Value;
        if Value then
            spawn(function()
                while getgenv().localtele do
                    game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(1, 1, 1), false, game.Players.LocalPlayer.Character);
                    wait();
                end
            end);
        end
    end,
})

--AutoStats Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local AutoStatsTab = Window:CreateTab("AutoStats")
local AutoStatSection = AutoStatsTab:CreateSection("AutoStat")

-- Function to get the AutoStats list
local function GetAutoStatsList()
    return {"vitality", "healing", "strength", "energy", "flight", "speed", "climbing", "swinging", "fireball", "frost", "lightning", "power", "telekinesis", "shield", "laserVision", "metalSkin"}
end

-- Define a variable to store the number of points to put in each stat
local pointsPerStat = 30 -- Change this value as needed

-- Dropdown for selecting auto stats
local AutoStatsDropdown = AutoStatsTab:CreateDropdown({
    Name = "Select AutoStat",
    Options = GetAutoStatsList(),
    CurrentOption = {GetAutoStatsList()[1]}, -- Set the default option if needed
    MultipleOptions = false,
    Flag = "AutoStatsDropdown",
    Callback = function(selectedOption)
        selectedstat = selectedOption[1]
        -- Additional code if needed when the selected option changes
    end,
})

-- Toggle for auto stats
local AutoStatsToggle = AutoStatsTab:CreateToggle({
    Name = "Toggle AutoStats",
    CurrentValue = false,
    Flag = "AutoStatsToggle", -- Make sure each element has a different flag for configuration saving
    Callback = function(state)
        if state then
            getgenv().AutoStats = true;
            while getgenv().AutoStats do
                wait(0.1);
                spawn(function()
                    -- Invoke the server call with the selected stat and the pointsPerStat value
                    game:GetService("ReplicatedStorage").Events.UpgradeAbility:InvokeServer(selectedstat, pointsPerStat);
                end);
            end
        else
            spawn(function()
                getgenv().AutoStats = false;
            end);
        end
    end,
})

--Target Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local TargetTab = Window:CreateTab("Target")
local TargetSection = TargetTab:CreateSection("Players")

-- Name Esp Button
-- Function to get the player list
local function GetPlayerList()
    local playerList = {}
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        table.insert(playerList, player.Name)
    end
    return playerList
end

--Player Dropdown
local PlayerDropdown = TargetTab:CreateDropdown({
    Name = "Select Player",
    Options = GetPlayerList(),
    CurrentOption = {GetPlayerList()[1]}, -- Set the default player
    MultipleOptions = false,
    Flag = "PlayerDropdown",
    Callback = function(selectedPlayer)
        print("Selected Player: " .. selectedPlayer[1])
        _G.tplayer = selectedPlayer[1]
        getgenv().confirm = true
    end,
})

--Functions
local GotoPlayerButton = TargetTab:CreateButton({
    Name = "Goto Player",
    Callback = function()
        spawn(function()
            local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart;
            p1.CFrame = game.Players[_G.tplayer].Character.HumanoidRootPart.CFrame;
            breakvelocity();
        end);
    end,
})

local SpectateToggle = TargetTab:CreateToggle({
    Name = "Spectate",
    CurrentValue = false,
    Flag = "SpectateToggle",
    Callback = function(Value)
        if Value then
            getgenv().watch = true
            spawn(function()
                while getgenv().watch do
                    local viewing = game.Players[_G.tplayer]
                    if viewing and viewing.Character then
                        workspace.CurrentCamera.CameraSubject = viewing.Character
                    end
                    wait(0.1)
                end
            end)
        else
            getgenv().watch = false
            local localPlayer = game.Players.LocalPlayer
            if localPlayer and localPlayer.Character then
                workspace.CurrentCamera.CameraSubject = localPlayer.Character
            end
        end
    end
})

local KillPlayerToggle = TargetTab:CreateToggle({
    Name = "Kill Player",
    CurrentValue = false,
    Flag = "KillPlayerToggle", -- Make sure each element has a different flag for configuration saving
    Callback = function(Value)
        if Value then
            getgenv().killplr = true;

            -- Store the player's initial position
            local player = game.Players.LocalPlayer
            local varX, varY, varZ

            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = player.Character.HumanoidRootPart.Position
                varX, varY, varZ = rootPart.X, rootPart.Y, rootPart.Z
            end

            getgenv().breakv = true;

            -- Kill player loop
            spawn(function()
                while getgenv().killplr do
                    wait(0.1)

                    -- Your killing logic here using the selected player (_G.tplayer)
                    -- ...

                    -- Example: Move to the player and punch
                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)
                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        player.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 1)
                        game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                    end
                end
            end)
        else
            -- Disable the kill player loop
            spawn(function()
                getgenv().breakv = false
                wait(0.2)
                getgenv().killplr = false
                wait(0.1)
                getgenv().killplr = true
                -- Additional logic if needed
            end)
        end
    end,
})

local LoopGotoToggle = TargetTab:CreateToggle({
    Name = "Loop Goto Player",
    CurrentValue = false,
    Flag = "LoopGotoToggleFlag",
    Callback = function(state)
        if state then
            getgenv().loopgoto = true

            local player = game.Players.LocalPlayer
            local varX = player.Character.HumanoidRootPart.Position.X
            local varY = player.Character.HumanoidRootPart.Position.Y
            local varZ = player.Character.HumanoidRootPart.Position.Z

            local p1 = player.Character.HumanoidRootPart
            local pos = p1.CFrame
            getgenv().breakv = true
            spawn(function()
                while breakv do
                    wait(1)
                    breakvelocity()
                end
            end)
            while loopgoto do
                task.wait()
                spawn(function()
                    pcall(function()
                        for i, v in pairs(game.Workspace:GetChildren()) do
                            if v.Name == _G.tplayer and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)
                            end
                        end
                    end)
                end)
                spawn(function()
                    if not loopgoto then
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(varX, varY, varZ)
                    end
                end)
            end
        else
            spawn(function()
                getgenv().breakv = false
                wait(0.2)
                getgenv().loopgoto = false
                wait(0.1)
                getgenv().loopgoto = true
                breakvelocity()
            end)
        end
    end
})

local FlingToggle = TargetTab:CreateToggle({
    Name = "Fling",
    CurrentValue = false,
    Flag = "FlingToggle",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        if Value then
            getgenv().fling = true

            -- Initialization code
            local varX = player.Character.HumanoidRootPart.Position.X
            local varY = player.Character.HumanoidRootPart.Position.Y
            local varZ = player.Character.HumanoidRootPart.Position.Z

            local p1 = player.Character.HumanoidRootPart.CFrame

            getgenv().Flingvel = true

            for _, child in pairs(player.Character:GetDescendants()) do
                if child:IsA("BasePart") then
                    child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
                end
            end

            local bambam = Instance.new("BodyAngularVelocity")
            bambam.Parent = player.Character.HumanoidRootPart
            bambam.AngularVelocity = Vector3.new(0, 1000, 0)
            bambam.MaxTorque = Vector3.new(0, math.huge, 0)

            for _, v in ipairs(player.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                    v.Massless = true
                    v.Velocity = Vector3.new(0, 0, 0)
                end
            end

            -- Fling loop
            while getgenv().fling do
                task.wait()

                for _, v in pairs(game.Workspace:GetChildren()) do
                    if v.Name == _G.tplayer and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                        player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
                    end
                end

                local PrimaryPart = player.Character.PrimaryPart
                if PrimaryPart then
                    local magnitude = PrimaryPart.AssemblyLinearVelocity.Magnitude
                    if magnitude > 250 or PrimaryPart.AssemblyAngularVelocity.Magnitude > 250 then
                        PrimaryPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                        PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        PrimaryPart.CFrame = p1
                    elseif magnitude < 50 or PrimaryPart.AssemblyAngularVelocity.Magnitude > 50 then
                        p1 = PrimaryPart.CFrame
                    end
                end

                if not getgenv().fling then
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(varX, varY, varZ)
                end
            end
        else
            getgenv().fling = false

            -- Cleanup code
            wait(0.1)
            getgenv().fling = true

            local playerChar = player.Character
            if playerChar and getRoot(playerChar) then
                for _, v in pairs(getRoot(playerChar):GetChildren()) do
                    if v:IsA("BodyAngularVelocity") then
                        v:Destroy()
                    end
                end
                for _, child in pairs(playerChar:GetDescendants()) do
                    if child:IsA("Part") or child:IsA("MeshPart") then
                        child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
                    end
                end
            end
        end
    end
})

local LaserToggle = TargetTab:CreateToggle({
    Name = "Laser",
    CurrentValue = false,
    Flag = "LaserToggle",
    Callback = function(state)
        if state then
            getgenv().LaserL = true

            spawn(function()
                wait()

                local event = game:GetService("ReplicatedStorage").Events.ToggleLaserVision
                local part

                pcall(function()
                    part = event:InvokeServer(true)
                end)

                while getgenv().LaserL and part and _G.tplayer do
                    wait()

                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)

                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        part.Position = targetPlayer.Character.HumanoidRootPart.Position
                    end
                end

                pcall(function()
                    event:InvokeServer(false)
                end)
            end)
        else
            getgenv().LaserL = false
        end
    end
})

local GiveOrbsToggle = TargetTab:CreateToggle({
    Name = "Give Orbs",
    CurrentValue = false,
    Flag = "GiveOrbsToggle",
    Callback = function(state)
        if state then
            getgenv().ORBGIVE = true

            spawn(function()
                while getgenv().ORBGIVE do
                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)
                    if targetPlayer and targetPlayer.Character then
                        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            for _, orb in pairs(game:GetService("Workspace").ExperienceOrbs:GetChildren()) do
                                orb.CFrame = hrp.CFrame
                            end
                        end
                    end
                    wait()
                end
            end)
        else
            spawn(function()
                getgenv().ORBGIVE = false
            end)
        end
    end
})

local DisableTelekinesisToggle = TargetTab:CreateToggle({
    Name = "Disable Telekinesis",
    CurrentValue = false,
    Flag = "DisableTelekinesisToggle",
        Callback = function(Value)
		if state then
			Players = game:GetService("Players");
			for i, player in pairs(Players:GetPlayers()) do
				getgenv().LToggle = true;
				spawn(function()
					while LToggle do
						wait();
						game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(1, 1, 1), false, game.Players[player.Name].Character);
					end
				end);
			end
		else
			spawn(function()
				getgenv().LToggle = false;
			end);
		end
    end,
})

--Teleport Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local TeleportTab = Window:CreateTab("Teleport")
local TeleportSection = TeleportTab:CreateSection("Teleports")

-- Button 1: Bar
TeleportTab:CreateButton({
    Name = "Bar",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1313, 1000, 149)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1313, 197, 149)
        end
        breakvelocity()
    end,
})

-- Button 2: City Square
TeleportTab:CreateButton({
    Name = "City Square",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-385, 1000, 256)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-385, 86, 256)
        end
        breakvelocity()
    end,
})

-- Button 3: Motel
TeleportTab:CreateButton({
    Name = "Motel",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1749.87, 1000, -1348.98)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1750, 94, -1349)
        end
        breakvelocity()
    end,
})

-- Button 4: Secret Area
TeleportTab:CreateButton({
    Name = "Secret Area",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1100, 61, -1169)
        breakvelocity()
    end,
})

-- Button 5: Secret Cave
TeleportTab:CreateButton({
    Name = "Secret Cave",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(269, -59, 2729)
        breakvelocity()
    end,
})

-- Button 6: Corner 1
TeleportTab:CreateButton({
    Name = "Corner 1",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2773, 1000, -4996)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2773, 96, -4996)
        end
        breakvelocity()
    end
})

-- Button 7: Corner 2
TeleportTab:CreateButton({
    Name = "Corner 2",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3757, 1000, -3801)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3757, 97, -3801)
        end
        breakvelocity()
    end
})

-- Button 8: Corner 3
TeleportTab:CreateButton({
    Name = "Corner 3",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3650, 1000, 2764)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3650, 97, 2764)
        end
        breakvelocity()
    end
})

-- Button 9: Corner 4
TeleportTab:CreateButton({
    Name = "Corner 4",
    Callback = function()
        if (_G.bring == true) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2809, 1000, 2821)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2810, 102, 2821)
        end
        breakvelocity()
    end
})

--KeyBinds Window----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local KeyBindsTab = Window:CreateTab("KeyBinds")
local KeyBindsSection = KeyBindsTab:CreateSection("KeyBind")

local MetalSkinKeybind = KeyBindsTab:CreateKeybind({
    Name = "MetalSkin",
    CurrentKeybind = "R",
    HoldToInteract = false,
    Flag = "MetalSkinKeybind",
    Callback = function(Keybind)
        if not _G.metalskin then
            game:GetService("ReplicatedStorage").Events.Transform:FireServer("metalSkin", true)
            _G.metalskin = true
        else
            game:GetService("ReplicatedStorage").Events.Transform:FireServer("metalSkin", false)
            _G.metalskin = false
        end
    end,
})

local CarryPlayerKeybind = KeyBindsTab:CreateKeybind({
    Name = "Carry Player",
    CurrentKeybind = "H",
    HoldToInteract = false,
    Flag = "CarryPlayerKeybind", 
    Callback = function(Keybind)
        if Keybind then
            spawn(function()
                getNearPlayer(99)
                wait()
                _G.CToggle = true
                getgenv().CarryP = true
                while CarryP do
                    wait()
                    spawn(function()
                        for _, v in pairs(plrlist) do
                            if v ~= player then
                                local Xt = player.Character.HumanoidRootPart.Position.X
                                local Yt = player.Character.HumanoidRootPart.Position.Y
                                local Zt = player.Character.HumanoidRootPart.Position.Z
                                game:GetService("Workspace")[v.Name].HumanoidRootPart.telekinesisPosition.Position = Vector3.new(Xt, Yt + 8, Zt + 5)
                            end
                        end
                    end)
                end
            end)
        else
            spawn(function()
                _G.CToggle = false
                plrlist = {}
                getgenv().CarryP = false
            end)
        end
    end
})

local TelekinesisLockKeybind = KeyBindsTab:CreateKeybind({
    Name = "Telekinesis Lock",
    CurrentKeybind = "T",
    HoldToInteract = false,
    Flag = "TelekinesisLockKeybind",
    Callback = function(Keybind)
        local LookVector = game.Workspace.Camera.CFrame.LookVector
        game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(LookVector, true)
        wait(0.1)  -- Adjust the delay based on your needs
        game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(LookVector, false)
    end,
})

local TelekinesisKillKeybind = KeyBindsTab:CreateKeybind({
    Name = "Telekinesis kill",
    CurrentKeybind = "G",
    HoldToInteract = false,
    Flag = "TelekinesisKillKeybind",
    Callback = function()
        spawn(function()
            local plrlist = getNearPlayer(99); -- Assuming getNearPlayer returns a list of players

            for i, v in pairs(plrlist) do
                if v ~= player then
                    spawn(function()
                        if v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("Humanoid") then
                            v.Character.Head:Destroy()
                            v.Character:FindFirstChild("Humanoid").Health = 0 -- Set health to 0 after removing head (assuming you want to "kill" the player)
                        end

                        wait(0.2)

                        spawn(function()
                            game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(1, 1, 1), false, game.Players[v.Name].Character)
                        end)
                    end)
                end
            end
        end)
    end
})

local ReleaseTelekinesisKeybind = KeyBindsTab:CreateKeybind({
    Name = "Release Telekinesis",
    CurrentKeybind = "C", -- Keep it as a string if that's what your framework expects
    HoldToInteract = false,
    Flag = "ReleaseTelekinesisKeybind",
    Callback = function()
        plrlist = {};
        local Players = game:GetService("Players");
        for i, player in pairs(Players:GetPlayers()) do
            spawn(function()
                game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(1, 1, 1), false, game.Players[player.Name].Character);
            end);
        end
    end,
})

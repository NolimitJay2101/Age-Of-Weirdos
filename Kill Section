-- Name Esp Button
-- Function to get the player list
local function GetPlayerList()
    local playerList = {}
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        table.insert(playerList, player.Name)
    end
    return playerList
end

--Player Dropdown
local PlayerDropdown = TargetTab:CreateDropdown({
    Name = "Select Player",
    Options = GetPlayerList(),
    CurrentOption = {GetPlayerList()[1]}, -- Set the default player
    MultipleOptions = false,
    Flag = "PlayerDropdown",
    Callback = function(selectedPlayer)
        print("Selected Player: " .. selectedPlayer[1])
        _G.tplayer = selectedPlayer[1]
        getgenv().confirm = true
    end,
})

--Functions
local GotoPlayerButton = TargetTab:CreateButton({
    Name = "Goto Player",
    Callback = function()
        spawn(function()
            local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart;
            p1.CFrame = game.Players[_G.tplayer].Character.HumanoidRootPart.CFrame;
            breakvelocity();
        end);
    end,
})

local KillPlayerToggle = TargetTab:CreateToggle({
    Name = "Kill Player",
    CurrentValue = false,
    Flag = "KillPlayerToggle", -- Make sure each element has a different flag for configuration saving
    Callback = function(Value)
        if Value then
            getgenv().killplr = true;

            -- Store the player's initial position
            local player = game.Players.LocalPlayer
            local varX, varY, varZ

            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = player.Character.HumanoidRootPart.Position
                varX, varY, varZ = rootPart.X, rootPart.Y, rootPart.Z
            end

            getgenv().breakv = true;

            -- Kill player loop
            spawn(function()
                while getgenv().killplr do
                    wait(0.1)

                    -- Your killing logic here using the selected player (_G.tplayer)
                    -- ...

                    -- Example: Move to the player and punch
                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)
                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        player.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 1)
                        game:GetService("ReplicatedStorage").Events.Punch:FireServer(0, 0.1, 1)
                    end
                end
            end)
        else
            -- Disable the kill player loop
            spawn(function()
                getgenv().breakv = false
                wait(0.2)
                getgenv().killplr = false
                wait(0.1)
                getgenv().killplr = true
                -- Additional logic if needed
            end)
        end
    end,
})

local LoopGotoToggle = TargetTab:CreateToggle({
    Name = "LoopGoto",
    CurrentValue = false,
    Flag = "LoopGotoToggle",
    Callback = function(state) -- Corrected parameter name from 'Value' to 'state'
        if state then
            getgenv().loopgoto = true;
            local player = game.Players.LocalPlayer
            local varX, varY, varZ

            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = player.Character.HumanoidRootPart.Position
                varX, varY, varZ = rootPart.X, rootPart.Y, rootPart.Z
            end

            wait();

            getgenv().breakv = true;

            spawn(function()
                while getgenv().breakv do
                    wait(1);
                    breakvelocity();
                end
            end);

            while getgenv().loopgoto do
                task.wait();
                spawn(function()
                    pcall(function()
                        for _, v in pairs(game.Workspace:GetChildren()) do
                            if v.Name == _G.tplayer and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3);
                            end
                        end
                    end);
                end);
                
                spawn(function()
                    if not getgenv().loopgoto then
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(varX, varY, varZ);
                    end
                end);
            end
        else
            spawn(function()
                getgenv().breakv = false;
                wait(0.2);
                getgenv().loopgoto = false;
                wait(0.1);
                getgenv().loopgoto = true;
                breakvelocity();
            end);
        end
    end,
})

local FlingToggle = TargetTab:CreateToggle({
    Name = "Fling",
    CurrentValue = false,
    Flag = "FlingToggle",
    Callback = function(state)
        if state then
            getgenv().fling = true;

            local player = game.Players.LocalPlayer
            local varX, varY, varZ

            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = player.Character.HumanoidRootPart.Position
                varX, varY, varZ = rootPart.X, rootPart.Y, rootPart.Z
            end

            wait()

            getgenv().Flingvel = true;

            -- Set custom physical properties for all parts in the character
            for _, child in pairs(player.Character:GetDescendants()) do
                if child:IsA("BasePart") then
                    child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
                end
            end

            local bambam = Instance.new("BodyAngularVelocity")
            bambam.Parent = player.Character.HumanoidRootPart
            bambam.AngularVelocity = Vector3.new(0, 1000, 0)
            bambam.MaxTorque = Vector3.new(0, math.huge, 0)

            local char = player.Character:GetChildren()

            -- Disable collisions for all parts in the character
            for _, v in next, char do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                    v.Massless = true
                    v.Velocity = Vector3.new(0, 0, 0)
                end
            end

            while getgenv().fling do
                task.wait()

                -- Your fling logic here using the selected player (_G.tplayer)
                -- ...

                spawn(function()
                    pcall(function()
                        for _, v in pairs(game.Workspace:GetChildren()) do
                            if v.Name == _G.tplayer and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                player.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
                            end
                        end
                    end)
                end)

                spawn(function()
                    local PrimaryPart = player.Character.PrimaryPart
                    if PrimaryPart and ((PrimaryPart.AssemblyLinearVelocity.Magnitude > 250) or (PrimaryPart.AssemblyAngularVelocity.Magnitude > 250)) then
                        PrimaryPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                        PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        PrimaryPart.CFrame = LastPosition
                    elseif PrimaryPart and ((PrimaryPart.AssemblyLinearVelocity.Magnitude < 50) or (PrimaryPart.AssemblyAngularVelocity.Magnitude > 50)) then
                        LastPosition = PrimaryPart.CFrame
                    end
                end)

                spawn(function()
                    if not getgenv().fling then
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(varX, varY, varZ)
                    end
                end)
            end
        else
            spawn(function()
                getgenv().fling = false
                wait(0.1)
                getgenv().fling = true
            end)

            local playerChar = player.Character
            if not playerChar or not getRoot(playerChar) then
                return
            end

            -- Destroy BodyAngularVelocity instances
            for _, v in pairs(getRoot(playerChar):GetChildren()) do
                if v:IsA("BodyAngularVelocity") then
                    v:Destroy()
                end
            end

            -- Reset physical properties for parts in the character
            for _, child in pairs(playerChar:GetDescendants()) do
                if child:IsA("BasePart") or child:IsA("MeshPart") then
                    child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
                end
            end

            breakvelocity()
        end
    end
})

local LaserToggle = TargetTab:CreateToggle({
    Name = "Laser",
    CurrentValue = false,
    Flag = "LaserToggle",
    Callback = function(state)
        if state then
            getgenv().LaserL = true

            spawn(function()
                wait()

                local event = game:GetService("ReplicatedStorage").Events.ToggleLaserVision
                local part

                pcall(function()
                    part = event:InvokeServer(true)
                end)

                while getgenv().LaserL and part and _G.tplayer do
                    wait()

                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)

                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        part.Position = targetPlayer.Character.HumanoidRootPart.Position
                    end
                end

                pcall(function()
                    event:InvokeServer(false)
                end)
            end)
        else
            getgenv().LaserL = false
        end
    end
})

local GiveOrbsToggle = TargetTab:CreateToggle({
    Name = "Give Orbs",
    CurrentValue = false,
    Flag = "GiveOrbsToggle",
    Callback = function(state)
        if state then
            getgenv().ORBGIVE = true

            spawn(function()
                while getgenv().ORBGIVE do
                    local targetPlayer = game.Players:FindFirstChild(_G.tplayer)
                    if targetPlayer and targetPlayer.Character then
                        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            for _, orb in pairs(game:GetService("Workspace").ExperienceOrbs:GetChildren()) do
                                orb.CFrame = hrp.CFrame
                            end
                        end
                    end
                    wait()
                end
            end)
        else
            spawn(function()
                getgenv().ORBGIVE = false
            end)
        end
    end
})

local DisableTelekinesisToggle = TargetTab:CreateToggle({
    Name = "Disable Telekinesis",
    CurrentValue = false,
    Flag = "DisableTelekinesisToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
		if state then
			Players = game:GetService("Players");
			for i, player in pairs(Players:GetPlayers()) do
				getgenv().LToggle = true;
				spawn(function()
					while LToggle do
						wait();
						game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(Vector3.new(1, 1, 1), false, game.Players[player.Name].Character);
					end
				end);
			end
		else
			spawn(function()
				getgenv().LToggle = false;
			end);
		end
    end,
 })
